import org.junit.Test;
import static org.junit.Assert.*;



/* DO NOT EDIT this file, we will not see your changes. 
 * Add your own JUnit test cases to MyTest.java */




/**
 * Tests some image manipulations.
 * 
 * Note that these tests are not comprehensive. Passing these tests is not
 * enough to consider this assignment complete. Be sure to test with the GUI
 * and write some of your own tests in PennstagramTest.
 */
public class ManipulateTest {

	/*
	 * Methods to generate test cases.
	 */
	
    public static PixelPicture smallSquare() {
		return new PixelPicture(new Pixel[][] {
            {Pixel.BLACK, Pixel.BLUE},
            {Pixel.RED,   Pixel.GREEN}
        });
	}

    public static PixelPicture smallSquareBorder() { 
        return new PixelPicture(new Pixel[][] {
                {Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, Pixel.WHITE},
                {Pixel.WHITE, Pixel.BLACK, Pixel.BLUE,  Pixel.WHITE},
                {Pixel.WHITE, Pixel.RED,   Pixel.GREEN, Pixel.WHITE}, 
                {Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, Pixel.WHITE}
            });
	}

    public static PixelPicture threeStripes (int r0, int g0, int b0,
                                 int r1, int g1, int b1,
                                 int r2, int g2, int b2) {
        Pixel [][] bmp = new Pixel[256][256];
        for (int x=0; x<256; x++) {
            for (int y=0; y<256; y++) {
                if (x > 200)
                    bmp[x][y] = new Pixel(r0,g0,b0);
                else if (x > 100)
                    bmp[x][y] = new Pixel(r1,g1,b1);
                else 
                    bmp[x][y] = new Pixel(r2,g2,b2);
            }
        }
        return new PixelPicture(bmp);
    }

    public static PixelPicture testNewPic() {
        Pixel [][] bmp = new Pixel[256][256];
        for (int x=0; x<256; x++)
            for (int y=0; y<256; y++)
                bmp[x][y] = new Pixel(x,x+y,x^y);
        return new PixelPicture(bmp);
    }


    public static PixelPicture testNewPicCCW() {
        Pixel [][] bmp = new Pixel[256][256];
        for (int x=0; x<256; x++) {
            for (int y=0; y<256; y++) {
                bmp[y][255-x] = new Pixel(x,x+y,x^y);
            }
        }
        return new PixelPicture(bmp);
    }


    public static PixelPicture doubleSmallSquareBorder() {
        return new PixelPicture(new Pixel[][] {
                {Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, 
                 Pixel.WHITE, Pixel.WHITE},
                {Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, 
                 Pixel.WHITE, Pixel.WHITE},
                {Pixel.WHITE, Pixel.WHITE, Pixel.BLACK, Pixel.BLUE,  
                 Pixel.WHITE, Pixel.WHITE},
                {Pixel.WHITE, Pixel.WHITE, Pixel.RED,   Pixel.GREEN, 
                 Pixel.WHITE, Pixel.WHITE}, 
                {Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, 
                 Pixel.WHITE, Pixel.WHITE},
                {Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, Pixel.WHITE, 
                 Pixel.WHITE, Pixel.WHITE}
            });
	}

    /* ------ CW rotation, provided code ------- */

    @Test public void rotateCW_small() {
        assertEquals("rotateCW 2x2 image",
                     0,
                     PixelPicture.diff(
                                  new PixelPicture(new Pixel[][] {
                                          {Pixel.BLUE, Pixel.GREEN},
                                          {Pixel.BLACK,Pixel.RED}
                                      }),
                                  SimpleManipulations.rotateCW(smallSquare())
                                  )
                     );
    }

	@Test public void border_small() {
        PixelPicture p = SimpleManipulations.border(smallSquare(), 1, Pixel.WHITE);
        assertEquals("Pixel.WHITE Border on Small image", 
                     0,
                     PixelPicture.diff(p, smallSquareBorder()));
    }

	@Test public void luminosity_small() {
        assertTrue("GrayScaleLuminosity on 2x2 image",
                   9 >= //Allow off by 1 for each non-black color component         
                   PixelPicture.diff(
                                new PixelPicture(new Pixel[][] {
                                        {Pixel.BLACK,    new Pixel(29,29,29)},
                                        {new Pixel(76,76,76), new Pixel(149,149,149)}
                                    }),
                                SimpleManipulations.grayScaleLuminosity(smallSquare())
                                )
                   );

    }

	@Test public void average_small() {
        assertTrue("GrayScaleAverage on 2x2 image",
                   9 >= //Allow off by 1
                   PixelPicture.diff(
                                new PixelPicture(new Pixel[][] {
                                        {new Pixel(0,0,0),    new Pixel(85,85,85)},
                                        {new Pixel(85,85,85),new Pixel(85,85,85)}
                                    }),
                                SimpleManipulations.grayScaleAverage(smallSquare())
                                )
                   );
    }
	
	@Test public void color_invert_small() {
        assertTrue("ColorInvert on 2x2 image",
                   9 >= //Allow off by 1
                   PixelPicture.diff(new PixelPicture(new Pixel[][] {
                               {new Pixel(255,255,255), new Pixel(255,255,0)},
                               {new Pixel(0,255,255),new Pixel(255,0,255)}
                           }),
                       SimpleManipulations.invertColors(smallSquare())
                       )
                   );
    }

	@Test public void color_scale_red() {
        assertEquals("Only keep red component of each pixel", 
                     0, 
                     PixelPicture.diff(new PixelPicture(new Pixel[][]{
                                 {Pixel.BLACK, Pixel.BLACK},
                                 {Pixel.RED, Pixel.BLACK}}),
                         SimpleManipulations.scaleColors(smallSquare(),1.0,0.0,0.0)));    
    }

    /*  ---------------- alpha-Blend -------------------- */

	@Test public void blend_small() {
        assertTrue("blend on 2x2 with black",
                   3 >=
                   PixelPicture.diff(new PixelPicture(new Pixel [][] {
                               {Pixel.BLACK, new Pixel(0,0,128)},
                               {new Pixel(128,0,0), new Pixel(0,128,0)}
                           }),
                       SimpleManipulations.alphaBlend(0.5, smallSquare(), 
                                             new PixelPicture(new Pixel[][] {
                                                     { Pixel.BLACK, Pixel.BLACK },
                                                     { Pixel.BLACK, Pixel.BLACK } 
                                                 })))
                   );
    }

    /*  ---------------- Contrast -------------------- */

	@Test public void contrast_small() {
        assertTrue("contrast on 2x2",
                   36 >= // Lots of rounding error...
                   PixelPicture.diff(
                                new PixelPicture(new Pixel [][] {
                                        {new Pixel(32,32,32),  new Pixel(32,32,160)},
                                        {new Pixel(160,32,32), new Pixel(32,160,32)}
                                    }),
                                AdvancedManipulations.adjustContrast(smallSquare(), 0.5)
                                )
                   );
    }

    /*  ---------------- ReducePalette -------------------- */


    
	@Test public void palette_trivial() {
        PixelPicture s = threeStripes(10,10,10,255,255,255,0,0,0);
        assertEquals("same size palette",
                     0,
                     PixelPicture.diff(
                                  threeStripes(10,10,10,255,255,255,0,0,0),
                                  AdvancedManipulations.reducePalette(s, 3)
                                  )
                     );
    }

	@Test public void palette_interesting() {
        PixelPicture s = threeStripes(0,0,0,255,255,255,10,10,10);
        assertEquals("3 to 2 palette",
                     0,
                     PixelPicture.diff(
                                  threeStripes(10,10,10,255,255,255,10,10,10),
                                  AdvancedManipulations.reducePalette(s, 2)
                                  )
                     );
    }




    /*--------------------Blur-------------------*/

	@Test public void blur_small() {
        assertTrue("Small Blur",
                   12 >= //Off by one okay 
                   PixelPicture.diff(
                                new PixelPicture(new Pixel[][] {
                                        {new Pixel(63,63,63), new Pixel(63,63,63)},
                                        {new Pixel(63,63,63),new Pixel(63,63,63)}
                                    }),
                                AdvancedManipulations.blur(smallSquare(),1)
                                )
                   );
    }
}
